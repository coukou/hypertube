syntax = "proto3";

package hypertube.library;

message Empty {}

message EpisodeQuality {
  string quality = 1;
  string magnet = 2;
}

message Episode {
  string num = 1;
  int64 date = 2;
  repeated string qualities = 3;
}

message AnimeAddRequest {
  string title = 1;
  string synopsis = 2;
  string thumbnail = 3;
  float popularity = 4;
}

message AnimeAddEpisodeRequest {
  string anime_id = 1;
  string num = 2;
  int64 date = 3;
  repeated EpisodeQuality qualities = 4;
}

message AnimeSeenRequest {
  string anime_id = 1;
  string episode_no = 2;
}

message AnimeAddResponse {
  string anime_id = 1;
}

message Anime {
  string id = 1;
  string title = 2;
  string synopsis = 3;
  string thumbnail = 4;
  repeated Episode episodes = 5;
}

message AnimeSearchRequest {
  string name = 1;
}

message AnimeListRequest {
  uint64 offset = 1;
  uint64 limit = 2;
}

message GetTorrentRequest {
  string anime = 1;
  string episode = 2;
  string quality = 3;
}

message GetTorrentResponse {
  string magnet = 1;
}

message AnimeRequest {
  string id = 1;
}

message CommentRequest {
  string anime = 1;
  string episode = 2;
  string comment = 3;
}

message Comment {
  string author = 1;
  string text = 2;
  uint64 date = 3;
}

message CommentListRequest {
  string anime = 1;
  string episode = 2;
}

message AnimeCountResponse {
  uint64 count = 1;
}

service LibraryService {
  rpc GetAnime(AnimeRequest) returns (Anime);
  rpc SearchAnime(AnimeSearchRequest) returns (stream Anime);
  rpc AnimeList(AnimeListRequest) returns (stream Anime);
  rpc AnimeCount(Empty) returns (AnimeCountResponse);
  rpc CommentEpisode(CommentRequest) returns (Comment);
  rpc CommentList(CommentListRequest) returns (stream Comment);
  rpc GetAnimeTorrent(GetTorrentRequest) returns (GetTorrentResponse);
}

service InternalLibraryService {
  rpc AddAnime(AnimeAddRequest) returns (AnimeAddResponse);
  rpc AddAnimeEpisode(AnimeAddEpisodeRequest) returns (Empty);
}
