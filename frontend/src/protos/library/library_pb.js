/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.hypertube.library.Anime', null, global);
goog.exportSymbol('proto.hypertube.library.AnimeAddEpisodeRequest', null, global);
goog.exportSymbol('proto.hypertube.library.AnimeAddRequest', null, global);
goog.exportSymbol('proto.hypertube.library.AnimeAddResponse', null, global);
goog.exportSymbol('proto.hypertube.library.AnimeListRequest', null, global);
goog.exportSymbol('proto.hypertube.library.AnimeRequest', null, global);
goog.exportSymbol('proto.hypertube.library.AnimeSeenRequest', null, global);
goog.exportSymbol('proto.hypertube.library.Comment', null, global);
goog.exportSymbol('proto.hypertube.library.CommentListRequest', null, global);
goog.exportSymbol('proto.hypertube.library.CommentRequest', null, global);
goog.exportSymbol('proto.hypertube.library.Empty', null, global);
goog.exportSymbol('proto.hypertube.library.Episode', null, global);
goog.exportSymbol('proto.hypertube.library.EpisodeQuality', null, global);
goog.exportSymbol('proto.hypertube.library.GetTorrentRequest', null, global);
goog.exportSymbol('proto.hypertube.library.GetTorrentResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.Empty.displayName = 'proto.hypertube.library.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.Empty}
 */
proto.hypertube.library.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.Empty;
  return proto.hypertube.library.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.Empty}
 */
proto.hypertube.library.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.EpisodeQuality = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.EpisodeQuality, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.EpisodeQuality.displayName = 'proto.hypertube.library.EpisodeQuality';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.EpisodeQuality.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.EpisodeQuality.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.EpisodeQuality} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.EpisodeQuality.toObject = function(includeInstance, msg) {
  var f, obj = {
    quality: jspb.Message.getFieldWithDefault(msg, 1, ""),
    torrent: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.EpisodeQuality}
 */
proto.hypertube.library.EpisodeQuality.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.EpisodeQuality;
  return proto.hypertube.library.EpisodeQuality.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.EpisodeQuality} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.EpisodeQuality}
 */
proto.hypertube.library.EpisodeQuality.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuality(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTorrent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.EpisodeQuality.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.EpisodeQuality.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.EpisodeQuality} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.EpisodeQuality.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuality();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTorrent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string quality = 1;
 * @return {string}
 */
proto.hypertube.library.EpisodeQuality.prototype.getQuality = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.EpisodeQuality.prototype.setQuality = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string torrent = 2;
 * @return {string}
 */
proto.hypertube.library.EpisodeQuality.prototype.getTorrent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.EpisodeQuality.prototype.setTorrent = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.Episode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hypertube.library.Episode.repeatedFields_, null);
};
goog.inherits(proto.hypertube.library.Episode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.Episode.displayName = 'proto.hypertube.library.Episode';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hypertube.library.Episode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.Episode.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.Episode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.Episode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Episode.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, ""),
    date: jspb.Message.getFieldWithDefault(msg, 2, 0),
    qualitiesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.Episode}
 */
proto.hypertube.library.Episode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.Episode;
  return proto.hypertube.library.Episode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.Episode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.Episode}
 */
proto.hypertube.library.Episode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addQualities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.Episode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.Episode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.Episode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Episode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getQualitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string num = 1;
 * @return {string}
 */
proto.hypertube.library.Episode.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.Episode.prototype.setNum = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 date = 2;
 * @return {number}
 */
proto.hypertube.library.Episode.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hypertube.library.Episode.prototype.setDate = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string qualities = 3;
 * @return {!Array.<string>}
 */
proto.hypertube.library.Episode.prototype.getQualitiesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.hypertube.library.Episode.prototype.setQualitiesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.hypertube.library.Episode.prototype.addQualities = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.hypertube.library.Episode.prototype.clearQualitiesList = function() {
  this.setQualitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.AnimeAddRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.AnimeAddRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.AnimeAddRequest.displayName = 'proto.hypertube.library.AnimeAddRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.AnimeAddRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.AnimeAddRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.AnimeAddRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeAddRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    synopsis: jspb.Message.getFieldWithDefault(msg, 2, ""),
    thumbnail: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rating: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.AnimeAddRequest}
 */
proto.hypertube.library.AnimeAddRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.AnimeAddRequest;
  return proto.hypertube.library.AnimeAddRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.AnimeAddRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.AnimeAddRequest}
 */
proto.hypertube.library.AnimeAddRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSynopsis(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnail(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRating(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.AnimeAddRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.AnimeAddRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.AnimeAddRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeAddRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSynopsis();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThumbnail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRating();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.hypertube.library.AnimeAddRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeAddRequest.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string synopsis = 2;
 * @return {string}
 */
proto.hypertube.library.AnimeAddRequest.prototype.getSynopsis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeAddRequest.prototype.setSynopsis = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string thumbnail = 3;
 * @return {string}
 */
proto.hypertube.library.AnimeAddRequest.prototype.getThumbnail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeAddRequest.prototype.setThumbnail = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float rating = 4;
 * @return {number}
 */
proto.hypertube.library.AnimeAddRequest.prototype.getRating = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.hypertube.library.AnimeAddRequest.prototype.setRating = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.AnimeAddEpisodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hypertube.library.AnimeAddEpisodeRequest.repeatedFields_, null);
};
goog.inherits(proto.hypertube.library.AnimeAddEpisodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.AnimeAddEpisodeRequest.displayName = 'proto.hypertube.library.AnimeAddEpisodeRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hypertube.library.AnimeAddEpisodeRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.AnimeAddEpisodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.AnimeAddEpisodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeAddEpisodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    animeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    num: jspb.Message.getFieldWithDefault(msg, 2, ""),
    date: jspb.Message.getFieldWithDefault(msg, 3, 0),
    qualitiesList: jspb.Message.toObjectList(msg.getQualitiesList(),
    proto.hypertube.library.EpisodeQuality.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.AnimeAddEpisodeRequest}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.AnimeAddEpisodeRequest;
  return proto.hypertube.library.AnimeAddEpisodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.AnimeAddEpisodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.AnimeAddEpisodeRequest}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnimeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    case 4:
      var value = new proto.hypertube.library.EpisodeQuality;
      reader.readMessage(value,proto.hypertube.library.EpisodeQuality.deserializeBinaryFromReader);
      msg.addQualities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.AnimeAddEpisodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.AnimeAddEpisodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeAddEpisodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnimeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNum();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getQualitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.hypertube.library.EpisodeQuality.serializeBinaryToWriter
    );
  }
};


/**
 * optional string anime_id = 1;
 * @return {string}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.getAnimeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.setAnimeId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string num = 2;
 * @return {string}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.getNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.setNum = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 date = 3;
 * @return {number}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.setDate = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated EpisodeQuality qualities = 4;
 * @return {!Array.<!proto.hypertube.library.EpisodeQuality>}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.getQualitiesList = function() {
  return /** @type{!Array.<!proto.hypertube.library.EpisodeQuality>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hypertube.library.EpisodeQuality, 4));
};


/** @param {!Array.<!proto.hypertube.library.EpisodeQuality>} value */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.setQualitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.hypertube.library.EpisodeQuality=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hypertube.library.EpisodeQuality}
 */
proto.hypertube.library.AnimeAddEpisodeRequest.prototype.addQualities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.hypertube.library.EpisodeQuality, opt_index);
};


proto.hypertube.library.AnimeAddEpisodeRequest.prototype.clearQualitiesList = function() {
  this.setQualitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.AnimeSeenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.AnimeSeenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.AnimeSeenRequest.displayName = 'proto.hypertube.library.AnimeSeenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.AnimeSeenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.AnimeSeenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.AnimeSeenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeSeenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    animeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    episodeNo: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.AnimeSeenRequest}
 */
proto.hypertube.library.AnimeSeenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.AnimeSeenRequest;
  return proto.hypertube.library.AnimeSeenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.AnimeSeenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.AnimeSeenRequest}
 */
proto.hypertube.library.AnimeSeenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnimeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpisodeNo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.AnimeSeenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.AnimeSeenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.AnimeSeenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeSeenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnimeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEpisodeNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string anime_id = 1;
 * @return {string}
 */
proto.hypertube.library.AnimeSeenRequest.prototype.getAnimeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeSeenRequest.prototype.setAnimeId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string episode_no = 2;
 * @return {string}
 */
proto.hypertube.library.AnimeSeenRequest.prototype.getEpisodeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeSeenRequest.prototype.setEpisodeNo = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.AnimeAddResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.AnimeAddResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.AnimeAddResponse.displayName = 'proto.hypertube.library.AnimeAddResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.AnimeAddResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.AnimeAddResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.AnimeAddResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeAddResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    animeId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.AnimeAddResponse}
 */
proto.hypertube.library.AnimeAddResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.AnimeAddResponse;
  return proto.hypertube.library.AnimeAddResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.AnimeAddResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.AnimeAddResponse}
 */
proto.hypertube.library.AnimeAddResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnimeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.AnimeAddResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.AnimeAddResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.AnimeAddResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeAddResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnimeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string anime_id = 1;
 * @return {string}
 */
proto.hypertube.library.AnimeAddResponse.prototype.getAnimeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeAddResponse.prototype.setAnimeId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.Anime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hypertube.library.Anime.repeatedFields_, null);
};
goog.inherits(proto.hypertube.library.Anime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.Anime.displayName = 'proto.hypertube.library.Anime';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hypertube.library.Anime.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.Anime.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.Anime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.Anime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Anime.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    synopsis: jspb.Message.getFieldWithDefault(msg, 3, ""),
    thumbnail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    episodesList: jspb.Message.toObjectList(msg.getEpisodesList(),
    proto.hypertube.library.Episode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.Anime}
 */
proto.hypertube.library.Anime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.Anime;
  return proto.hypertube.library.Anime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.Anime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.Anime}
 */
proto.hypertube.library.Anime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSynopsis(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnail(value);
      break;
    case 5:
      var value = new proto.hypertube.library.Episode;
      reader.readMessage(value,proto.hypertube.library.Episode.deserializeBinaryFromReader);
      msg.addEpisodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.Anime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.Anime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.Anime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Anime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSynopsis();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThumbnail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEpisodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.hypertube.library.Episode.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.hypertube.library.Anime.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.Anime.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.hypertube.library.Anime.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.Anime.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string synopsis = 3;
 * @return {string}
 */
proto.hypertube.library.Anime.prototype.getSynopsis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hypertube.library.Anime.prototype.setSynopsis = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string thumbnail = 4;
 * @return {string}
 */
proto.hypertube.library.Anime.prototype.getThumbnail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.hypertube.library.Anime.prototype.setThumbnail = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated Episode episodes = 5;
 * @return {!Array.<!proto.hypertube.library.Episode>}
 */
proto.hypertube.library.Anime.prototype.getEpisodesList = function() {
  return /** @type{!Array.<!proto.hypertube.library.Episode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hypertube.library.Episode, 5));
};


/** @param {!Array.<!proto.hypertube.library.Episode>} value */
proto.hypertube.library.Anime.prototype.setEpisodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.hypertube.library.Episode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hypertube.library.Episode}
 */
proto.hypertube.library.Anime.prototype.addEpisodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.hypertube.library.Episode, opt_index);
};


proto.hypertube.library.Anime.prototype.clearEpisodesList = function() {
  this.setEpisodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.AnimeListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.AnimeListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.AnimeListRequest.displayName = 'proto.hypertube.library.AnimeListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.AnimeListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.AnimeListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.AnimeListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.AnimeListRequest}
 */
proto.hypertube.library.AnimeListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.AnimeListRequest;
  return proto.hypertube.library.AnimeListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.AnimeListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.AnimeListRequest}
 */
proto.hypertube.library.AnimeListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.AnimeListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.AnimeListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.AnimeListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.hypertube.library.AnimeListRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hypertube.library.AnimeListRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 limit = 2;
 * @return {number}
 */
proto.hypertube.library.AnimeListRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hypertube.library.AnimeListRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.GetTorrentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.GetTorrentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.GetTorrentRequest.displayName = 'proto.hypertube.library.GetTorrentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.GetTorrentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.GetTorrentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.GetTorrentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.GetTorrentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    episode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quality: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.GetTorrentRequest}
 */
proto.hypertube.library.GetTorrentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.GetTorrentRequest;
  return proto.hypertube.library.GetTorrentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.GetTorrentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.GetTorrentRequest}
 */
proto.hypertube.library.GetTorrentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpisode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuality(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.GetTorrentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.GetTorrentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.GetTorrentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.GetTorrentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEpisode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuality();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string anime = 1;
 * @return {string}
 */
proto.hypertube.library.GetTorrentRequest.prototype.getAnime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.GetTorrentRequest.prototype.setAnime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string episode = 2;
 * @return {string}
 */
proto.hypertube.library.GetTorrentRequest.prototype.getEpisode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.GetTorrentRequest.prototype.setEpisode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string quality = 3;
 * @return {string}
 */
proto.hypertube.library.GetTorrentRequest.prototype.getQuality = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hypertube.library.GetTorrentRequest.prototype.setQuality = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.GetTorrentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.GetTorrentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.GetTorrentResponse.displayName = 'proto.hypertube.library.GetTorrentResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.GetTorrentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.GetTorrentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.GetTorrentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.GetTorrentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    torrent: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.GetTorrentResponse}
 */
proto.hypertube.library.GetTorrentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.GetTorrentResponse;
  return proto.hypertube.library.GetTorrentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.GetTorrentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.GetTorrentResponse}
 */
proto.hypertube.library.GetTorrentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTorrent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.GetTorrentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.GetTorrentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.GetTorrentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.GetTorrentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTorrent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string torrent = 1;
 * @return {string}
 */
proto.hypertube.library.GetTorrentResponse.prototype.getTorrent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.GetTorrentResponse.prototype.setTorrent = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.AnimeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.AnimeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.AnimeRequest.displayName = 'proto.hypertube.library.AnimeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.AnimeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.AnimeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.AnimeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.AnimeRequest}
 */
proto.hypertube.library.AnimeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.AnimeRequest;
  return proto.hypertube.library.AnimeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.AnimeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.AnimeRequest}
 */
proto.hypertube.library.AnimeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.AnimeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.AnimeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.AnimeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.AnimeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.hypertube.library.AnimeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.AnimeRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.CommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.CommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.CommentRequest.displayName = 'proto.hypertube.library.CommentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.CommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.CommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.CommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.CommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    episode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.CommentRequest}
 */
proto.hypertube.library.CommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.CommentRequest;
  return proto.hypertube.library.CommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.CommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.CommentRequest}
 */
proto.hypertube.library.CommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpisode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.CommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.CommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.CommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.CommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEpisode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string anime = 1;
 * @return {string}
 */
proto.hypertube.library.CommentRequest.prototype.getAnime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.CommentRequest.prototype.setAnime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string episode = 2;
 * @return {string}
 */
proto.hypertube.library.CommentRequest.prototype.getEpisode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.CommentRequest.prototype.setEpisode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string comment = 3;
 * @return {string}
 */
proto.hypertube.library.CommentRequest.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hypertube.library.CommentRequest.prototype.setComment = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.Comment.displayName = 'proto.hypertube.library.Comment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.Comment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    author: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.Comment}
 */
proto.hypertube.library.Comment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.Comment;
  return proto.hypertube.library.Comment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.Comment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.Comment}
 */
proto.hypertube.library.Comment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.Comment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.Comment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.Comment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.Comment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string author = 1;
 * @return {string}
 */
proto.hypertube.library.Comment.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.Comment.prototype.setAuthor = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.hypertube.library.Comment.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.Comment.prototype.setText = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hypertube.library.CommentListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hypertube.library.CommentListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hypertube.library.CommentListRequest.displayName = 'proto.hypertube.library.CommentListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hypertube.library.CommentListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hypertube.library.CommentListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hypertube.library.CommentListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.CommentListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    episode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hypertube.library.CommentListRequest}
 */
proto.hypertube.library.CommentListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hypertube.library.CommentListRequest;
  return proto.hypertube.library.CommentListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hypertube.library.CommentListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hypertube.library.CommentListRequest}
 */
proto.hypertube.library.CommentListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpisode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hypertube.library.CommentListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hypertube.library.CommentListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hypertube.library.CommentListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hypertube.library.CommentListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEpisode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string anime = 1;
 * @return {string}
 */
proto.hypertube.library.CommentListRequest.prototype.getAnime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hypertube.library.CommentListRequest.prototype.setAnime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string episode = 2;
 * @return {string}
 */
proto.hypertube.library.CommentListRequest.prototype.getEpisode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hypertube.library.CommentListRequest.prototype.setEpisode = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.hypertube.library);
